<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Core">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Core;component/Styles/CustomControlsStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <!--Menu  ImageButton Style -->
    <Style x:Key="MenuImageButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="ImageButtonContentMargin" Value="0,110,0,0" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="200" />
    </Style>
    
    <!--Menu Service Image Button Style -->
    <Style x:Key="MenuServiceImageButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource MenuImageButtonStyle}">
        <Setter Property="Background" Value="{StaticResource FlatDarkOrange}" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!--Menu Exit Image Button Style -->
    <Style x:Key="MenuExitImageButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource MenuImageButtonStyle}">
        <Setter Property="Background" Value="{StaticResource GradiantBlue}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <!--Menu Service Not Save ImageButton style -->
    <Style x:Key="MenuServiceNotSaveImageButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource MenuImageButtonStyle}">
        <Setter Property="Background" Value="Aquamarine" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!--Numeric up down button style -->
    <Style x:Key="NumericUpDownButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource GradiantBlack}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="KeyBorder" BorderThickness="1" 
                                Padding="2,2" BorderBrush="{TemplateBinding Foreground}" 
                                CornerRadius="6,6,6,6" Background="{TemplateBinding Background}">

                        <Grid Margin="2 2">
                            <TextBlock Name="testo" FontSize="22" 
                                       VerticalAlignment="Center" HorizontalAlignment="Center" 
                                       Text="{TemplateBinding Content}" TextWrapping="WrapWithOverflow" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsWritingMode}" Value="True">
                            <Setter TargetName="KeyBorder" Property="Path.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Direction="-45" BlurRadius="4" ShadowDepth="4" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="KeyBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="KeyBorder" Property="Background" Value="{StaticResource GradiantDarkOrange}" />
                            <Setter Property="Foreground" Value="#EE222222" />
                            <Setter TargetName="KeyBorder" Property="Path.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="Transparent" Direction="120"  ShadowDepth="4" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="KeyBorder" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Highlighted when pressed Button  style -->
    <Style x:Key="HighlightedPressedButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="KeyBorder" BorderThickness="1" 
                                Padding="2,2" BorderBrush="{TemplateBinding Foreground}" 
                                CornerRadius="0" Background="{TemplateBinding Background}">

                        <Grid Margin="2 2">
                            <TextBlock Name="testo" FontSize="22" 
                                       VerticalAlignment="Center" HorizontalAlignment="Center" 
                                       Text="{TemplateBinding Content}" TextWrapping="WrapWithOverflow" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="KeyBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="KeyBorder" Property="Background" Value="{StaticResource HighlightedBrush}" />
                            <Setter Property="Foreground" Value="#EE222222" />
                            <!--<Setter TargetName="KeyBorder" Property="Path.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="Transparent" Direction="120"  ShadowDepth="4" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="KeyBorder" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Normal button style. The pressed effect is applied -->
    <Style x:Key="NormalPressedButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="white" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Direction="-45" BlurRadius="4" ShadowDepth="4" Opacity="0.5"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="KeyBorder" BorderThickness="1" 
                                Padding="2,2" BorderBrush="{TemplateBinding Foreground}" 
                                CornerRadius="0" Background="{TemplateBinding Background}">

                        <Grid Margin="2 2">
                            <TextBlock Name="testo" FontSize="22" 
                                VerticalAlignment="Center" HorizontalAlignment="Center" 
                                Text="{TemplateBinding Content}" TextWrapping="WrapWithOverflow" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="KeyBorder" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.99" ScaleY="0.99"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Direction="-45" BlurRadius="4" ShadowDepth="0" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="KeyBorder" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This style is for scrool Bar -->
    <Style x:Key="ScroolBarStyle" TargetType="ScrollBar">
        <Setter Property="Width" Value="30"/>
    </Style>

    <!-- This style is for Password Checkbox-->
    <Style TargetType="{x:Type CheckBox}" x:Key="PasswordCheckboxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="checkboxImage" Source="{StaticResource ClosedEyeIcon}"  Width="32"/>
                        <ContentPresenter/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkboxImage" Property="Source" Value="{StaticResource OpenedEyeIcon}"/>
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="checkboxImage" Property="Source" Value="hover.png"/>
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This style is for Toggle button -->
    <Style x:Key="SwitchTypeToggleButton"
       TargetType="{x:Type ToggleButton}">

        <Style.Resources>
            <Color x:Key="Color.Additional.LightGrey">#989EA8</Color>
            <Color x:Key="Color.Additional.MediumGrey">White</Color>
            <Color x:Key="Color.MedtronicBranding.MedtronicBlue">White</Color>
            <Color x:Key="Color.MedtronicBranding.CobaltBlue">Green</Color>

            <Style x:Key="ToggleButtonContentTextbox"
               TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
            </Style>
            <SolidColorBrush x:Key="ToggleButtonFalseBackground"
                         Color="{StaticResource Color.Additional.LightGrey}" />
            <SolidColorBrush x:Key="ToggleButtonTrueBackground"
                         Color="{StaticResource Color.MedtronicBranding.CobaltBlue}" />
            <SolidColorBrush x:Key="ToggleButtonFalseForeground"
                         Color="{StaticResource Color.Additional.MediumGrey}" />
            <SolidColorBrush x:Key="ToggleButtonTrueForeground"
                         Color="{StaticResource Color.MedtronicBranding.MedtronicBlue}" />

            <TextBlock x:Key="OffContent"
                   Style="{StaticResource ToggleButtonContentTextbox}"
                   Text="Off" />
            <Style x:Key="OnContentControl"
               TargetType="ContentControl">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <!--<Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock FontFamily="Wingdings 2"
                                   FontSize="24"
                                   FontWeight="Bold"
                                   Foreground="White"
                                   Style="{StaticResource ToggleButtonContentTextbox}"
                                   Text="P" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>-->
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>
            <Style x:Key="OffContentControl"
               TargetType="ContentControl">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <!--<Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock FontSize="20"
                                   Foreground="White"
                                   Style="{StaticResource ToggleButtonContentTextbox}"
                                   Text="x" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>-->
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>

        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="MainRow">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="TopRow" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Ellipse x:Name="BackgroundEllipse1"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Left"                                          
                                 Fill="{StaticResource ToggleButtonTrueBackground}" />
                            <Ellipse x:Name="BackgroundEllipse2"
                                 Grid.Row="0"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Right"                                          
                                 Fill="{StaticResource ToggleButtonFalseBackground}" />
                            <Border x:Name="BackgroundBorder"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"                                
                                Background="{StaticResource ToggleButtonTrueBackground}" />
                        </Grid>
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="AnimationWidth" />
                                <ColumnDefinition Width="{Binding ElementName=MainRow,
                        Path=ActualHeight}" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="AnimationSizeBorder"
                                Grid.Column="0" />
                            <ContentControl Grid.Column="0"
                                        Style="{StaticResource OnContentControl}" />
                        </Grid>
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding ElementName=MainRow,
                Path=ActualHeight}" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <ContentControl Grid.Column="1"
                                        Style="{StaticResource OffContentControl}" />
                        </Grid>
                        <Grid Background="Transparent">
                            <StackPanel HorizontalAlignment="Left"
                                    Orientation="Horizontal">
                                <Border Width="{Binding ElementName=AnimationSizeBorder,
                Path=ActualWidth}" />
                                <Ellipse x:Name="ForegroundEllipse"
                                     Width="{Binding ElementName=MainRow,
                                                     Path=ActualHeight}"
                                     Height="{Binding ElementName=MainRow,
                                                      Path=ActualHeight}"
                                     HorizontalAlignment="Right"
                                         Stroke="Gray" StrokeThickness="2"
                                     Fill="{StaticResource ToggleButtonTrueForeground}"/>
                            </StackPanel>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background"
                Value="{StaticResource ToggleButtonFalseBackground}" />
                            <Setter TargetName="ForegroundEllipse" Property="Fill"
                Value="{StaticResource ToggleButtonFalseForeground}" />
                            <Setter TargetName="AnimationSizeBorder" Property="Width" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- This style is for Circle Checkbox-->
    <Style TargetType="CheckBox" x:Key="CircleCheckbox">
        <Setter Property="Content" Value=""/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Background="{StaticResource ButtonBrush}"  BorderBrush="DimGray" 
                                BorderThickness="2" CornerRadius="5" 
                                Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                                VerticalAlignment="Center"  HorizontalAlignment="Center">
                            <Grid>
                                <Ellipse x:Name="innerEllipse" Grid.Column="0" 
                                         Fill="WhiteSmoke" Margin="11"/>
                            </Grid>
                        </Border>
                        <ContentPresenter Grid.Column="1" x:Name="content" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Grid>

                    <!--Triggers-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="innerEllipse" Property="Fill" Value="Green"/>
                        </Trigger>
                        
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="innerEllipse" Property="Fill" Value="WhiteSmoke"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="false" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="innerEllipse" Property="Fill" Value="DarkGray"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="innerEllipse" Property="Fill" Value="LightSlateGray"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>

    <!--Rounded Radio Button-->
    <Style TargetType="RadioButton" x:Key="RoundedRadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="White" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Height="30" Width="30">
                                <!--Define size of the Bullet-->
                                <!--The two borders-->
                                <Border Name="RadioOuter" Background="Transparent" BorderBrush="Gainsboro" BorderThickness="2" CornerRadius="2" />
                                <Border CornerRadius="0" Margin="4" Name="RadioMark" Background="Green" Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--Text element-->
                        <TextBlock Margin="3,1,0,0" Foreground="#FF3E3E3E" FontFamily="Calibri" FontSize="12">
                        <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="Green" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Navigator button style (arrow) -->
    <Style  x:Key="NavigatorButtonBaseStyle" TargetType="{x:Type local:ImageButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <local:ImageButton Height="60" 
                                       ImageButtonPath="{TemplateBinding ImageButtonPath}"
                                       FontSize="11"
                                       Background="Black"
                                       Foreground="White"
                                       Content="{TemplateBinding Content}"
                                       Margin="-8, 0, 0, 0"
                                       ImageButtonContentMargin="{TemplateBinding ImageButtonContentMargin}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style  x:Key="NavigatorButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="Width" Value="125"/>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW}"/>
            <Setter Property="ImageButtonContentMargin" Value="0,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorButtonStyle_002" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_002}"></Setter>
            <Setter Property="Width" Value="164"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="0,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorButtonStyle_003" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_003}"/>
            <Setter Property="Width" Value="203"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="0,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorButtonStyle_004" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_003}"></Setter>
            <Setter Property="Width" Value="240"/>
            <Setter Property="Margin" Value="-1, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="0,0,0,0"/>
        </Style.Setters>
    </Style>

    <!--Navigator Home button style (arrow with image of home inside)  -->
    <Style  x:Key="NavigatorHomeButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="Width" Value="125"/>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_HOME}"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="15,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorHomeButtonStyle_002" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_HOME_002}"></Setter>
            <Setter Property="Width" Value="164"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="15,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorHomeButtonStyle_003" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_HOME_003}"></Setter>
            <Setter Property="Width" Value="203"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="15,0,0,0"/>
        </Style.Setters>
    </Style>

    <Style  x:Key="NavigatorHomeButtonStyle_004" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource NavigatorButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW_HOME_003}"></Setter>
            <Setter Property="Width" Value="242"/>
            <Setter Property="Margin" Value="0, 0, 0, 0"/>
            <Setter Property="ImageButtonContentMargin" Value="15,0,0,0"/>
        </Style.Setters>
    </Style>

    <!--Little Custom Button Base -->
    <Style  x:Key="LittleCustomButtonBaseStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="70"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="ImageButtonContentMargin" Value="0,45,0,0"/>
    </Style>

    <!--Little Button Service-->
    <Style  x:Key="CustomLittleButtonServiceStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource LittleCustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="Content" Value="{Binding Path=Label_Yes, Source={StaticResource Resources}}" />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style.Setters>
    </Style>

    <!--Little Button Yes-->
    <Style  x:Key="CustomLittleButtonYesStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource LittleCustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="ImageButtonPath" Value="{StaticResource OK}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Yes, Source={StaticResource Resources}}" />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ButtonResult" Value="Yes"/>
        </Style.Setters>
    </Style>

    <!--Little Button OK-->
    <Style  x:Key="CustomLittleButtonOKStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource LittleCustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="ImageButtonPath" Value="{StaticResource OK}"/>
            <Setter Property="Content" Value="{Binding Path=Label_OK, Source={StaticResource Resources}}" />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ButtonResult" Value="Yes"/>
        </Style.Setters>
    </Style>

    <!--Little Button No-->
    <Style  x:Key="CustomLittleButtonNoStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource LittleCustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource CANCEL}"/>
            <Setter Property="Content" Value="{Binding Path=Label_No, Source={StaticResource Resources}}" />
            <Setter Property="Background" Value="{StaticResource FlatDarkGreen}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ButtonResult" Value="No"/>
        </Style.Setters>
    </Style>

    <!--Little Button Back-->
    <Style  x:Key="CustomLittleButtonBackStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource LittleCustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BACK}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Back, Source={StaticResource Resources}}" />
            <Setter Property="Background" Value="{StaticResource FlatDarkBlue}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="ButtonResult" Value="Back"/>
            <Setter Property="ImageButtonContentMargin" Value="0,34,0,0"/>
        </Style.Setters>
    </Style>

    <!--Button arrow Previus\Next -->
    <Style  x:Key="ArrowMoveButtonStyle" TargetType="{x:Type local:ImageButton}"  BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <!--Custom Button Base -->
    <Style  x:Key="CustomButtonBaseStyle" TargetType="{x:Type local:ImageButton}"  BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <!--Custom Not Save Button Base -->
    <Style  x:Key="CustomNotSaveButtonBaseStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Setter Property="Background" Value="Aquamarine" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!--Custom Service Button Base -->
    <Style  x:Key="CustomServiceButtonBaseStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource ButtonCommandBackgroundBrush}" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!--Custom Delete Button Base -->
    <Style  x:Key="CustomDeleteButtonBaseStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource LinearIndianRed}" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <!-- Button Save-->
    <Style  x:Key="CustomButtonSaveStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource SAVE}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
            <Setter Property="ButtonResult" Value="Save"/>
        </Style.Setters>
    </Style>

    <!-- Button Star-->
    <Style  x:Key="CustomButtonStarStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource DT_STAR}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
        </Style.Setters>
    </Style>

    <!-- Button Pen-->
    <Style  x:Key="CustomButtonPenStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource DT_PEN}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
        </Style.Setters>
    </Style>

    <!-- Button Select-->
    <Style  x:Key="CustomButtonSelectStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BACK}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
        </Style.Setters>
    </Style>

    <!-- Button Remove-->
    <Style  x:Key="CustomButtonRemoveStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource CANCEL}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
        </Style.Setters>
    </Style>

    <!-- Button UP-->
    <Style  x:Key="CustomButtonUPStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource DT_ARROWUP_000}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Save, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0"/>
        </Style.Setters>
    </Style>

    <!-- Button Undo-->
    <Style  x:Key="CustomButtonUndoStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource RESET_UNDO}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Reset, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource FlatDarkOrange}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="ImageButtonContentMargin" Value="0,54,0,0" />
            <Setter Property="ButtonResult" Value="Reset"/>
        </Style.Setters>
    </Style>

    <!-- Custom Button Exit-->
    <Style  x:Key="CustomButtonExitStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource DT_ESCI_000}"/>
            <Setter Property="Content" Value="{Binding Path=Label_Exit, Source={StaticResource Resources}}"  />
            <Setter Property="Background" Value="{StaticResource ButtonExitBackgroundBrush}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="ImageButtonContentMargin" Value="0,70,0,0" />
            <Setter Property="ButtonResult" Value="Exit"/>
        </Style.Setters>
    </Style>

    <!-- Custom Button Filter Arrow-->
    <Style  x:Key="CustomFilterArrowButtonStyle" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Style.Setters>
            <Setter Property="ImageButtonPath" Value="{StaticResource BTN_ARROW}"/>
            <Setter Property="Background" Value="{StaticResource GradiantBlack}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="ImageButtonContentMargin" Value="5,0,0,0" />
            <Setter Property="Height" Value="60"/>
            <Setter Property="Width" Value="125"/>
        </Style.Setters>
    </Style>

    <!-- Menu Item Style-->
    <Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="0"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <Path x:Name="GlyphPanel" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                            <!--<ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                                <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#FFF0F0F0" Padding="2">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <Rectangle Fill="#FFD7D7D7" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="#1f418c"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF26A0DA"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF707070"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--FilterButton-->
    <Style x:Key="FilterButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="RootGrid">
                        <Image  Source="{StaticResource FilterIcon}" 
                                Stretch="Uniform"
                                VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="RootGrid" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.95" ScaleY="0.95"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>